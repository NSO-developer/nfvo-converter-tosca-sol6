
# These must match with 'provider-identifiers.{}'
# If the given provider for a VNFD matches with one of these, then it will automatically
# take the identifiers from this file
providers=["nokia"]

[provider-identifiers.nokia]
    virtual-compute             = ["type", "tosca.nodes.nfv.VirtualCompute"]
    virtual-storage             = ["type", "tosca.nodes.nfv.VirtualStorage"]
    sw-image                    = ["type", "tosca.nodes.nfv.SwImage"]
    vdu                         = ["type", "tosca.nodes.nfv.VDU"]
    ext-cpd                     = ["type", "tosca.nodes.nfv.ECP"]
    int-cpd                     = ["type", "tosca.nodes.nfv.ICP"]

# Note: If there is a variable with "path_VAL", that means it will not be parsed for the path
# heirarchy, but will instead be set with the value given
# The structure of the TOSCA file, in paths
[tosca]
    topology_template           = "topology_template"
    substitution_mappings       = ["topology_template", "substitution_mappings"]
    node_templates              = ["topology_template", "node_templates"]

    sub_properties              = ["substitution_mappings", "properties"]
    descriptor_id               = ["sub_properties", "descriptor_id"]
    descriptor_version          = ["sub_properties", "descriptor_version"]
    provider                    = ["sub_properties", "provider"]
    product_name                = ["sub_properties", "product_name"]
    software_version            = ["sub_properties", "software_version"]
    vnfm_info                   = ["sub_properties", "vnfm_info"]
    requirements                = ["sub_properties", "requirements"]
    product_info_name           = ["sub_properties", "product_info_name"]
    product_info_desc           = ["sub_properties", "product_info_description"]
    capabilities                = ["substitution_mappings", "capabilities"]

    vnf                         = ["capabilities", "vnf"]
    vnf_provider                = ["sub_properties", "provider"]

    virtual_compute             = ["node_templates", "{}"]
    virtual_compute_prop        = ["virtual_compute", "properties"]
    virtual_compute_mem_size    = ["virtual_compute_prop", "virtual_memory.virtual_mem_size"]
    virtual_compute_virt_cpu    = ["virtual_compute_prop", "virtual_cpu"]
    virtual_compute_cpu_num     = ["virtual_compute_virt_cpu", "num_virtual_cpu"]
    virtual_compute_cpu_arch    = ["virtual_compute_virt_cpu", "cpu_architecture"]
    virtual_compute_cpu_clock   = ["virtual_compute_virt_cpu", "virtual_cpu_clock"]

    virtual_storage             = ["node_templates", "{}"]
    virtual_storage_prop        = ["virtual_storage", "properties"]
    virtual_storage_type        = ["virtual_storage_prop", "type_of_storage"]
    virtual_storage_size        = ["virtual_storage_prop", "size_of_storage"]

    sw_image_r                  = ["node_templates", "{}"]
    sw_image                    = ["sw_image_r", "properties"]
    sw_image_name               = ["sw_image", "name"]
    sw_image_container_fmt      = ["sw_image", "container_format"]
    sw_image_version            = ["sw_image", "version"]
    sw_image_checksum           = ["sw_image", "checksum"]
    sw_image_min_disk           = ["sw_image", "min_disk"]
    sw_image_min_ram            = ["sw_image", "min_ram"]
    sw_image_size               = ["sw_image", "size"]
    sw_image_disk_fmt           = ["sw_image", "disk_format"]
    sw_image_sw_image           = ["sw_image", "sw_image"]
    sw_image_operating_system   = ["sw_image", "operating_system"]
    sw_image_supp_virt_environs = ["sw_image", "supported_virtualisation_environments"]

    vdu                         = ["node_templates", "{}"]
    vdu_props                   = ["vdu", "properties"]
    vdu_desc                    = ["vdu_props", "description"]
    vdu_req                     = ["vdu", "requirements"]
    vdu_req_virt_compute        = ["vdu_req", "virtual_compute"]
    vdu_req_virt_storage        = ["vdu_req", "virtual_storage"]
    vdu_req_sw_image            = ["vdu_req", "sw_image"]

    df                          = ["capabilities", "deployment_flavour"]
    df_prop                     = ["df", "properties"]
    df_id                       = ["df_prop", "flavour_id"]
    df_inst_level_default       = ["df_prop", "default_instantiation_level_id"]
    df_vdu_profs                = ["df_prop", "vdu_profile"]
    df_vdu_prof                 = ["df_vdu_profs", "{}"]
    df_vdu_prof_min_inst        = ["df_vdu_prof", "min_number_of_instances"]
    df_vdu_prof_max_inst        = ["df_vdu_prof", "max_number_of_instances"]
    df_inst_levels              = ["df_prop", "instantiation_levels"]
    df_inst_level               = ["df_inst_levels", "{}"]
    df_inst_vdu_levels          = ["df_inst_level", "vdu_levels"]
    df_inst_vdu_level           = ["df_inst_vdu_levels", "{}"]
    df_inst_vdu_level_num       = ["df_inst_vdu_level", "number_of_instances"]

    int_cpd                     = ["node_templates", "{}"]
    # This path must exist for an ICP to be created inside a VDU
    int_cpd_cond                = "requirements.virtual_binding"
    int_cpd_req                 = ["int_cpd", "requirements"]
    int_cpd_binding             = ["int_cpd_req", "virtual_binding"]
    int_cpd_link                = ["int_cpd_req", "virtual_link"]
    int_cpd_prop                = ["int_cpd", "properties"]
    int_cpd_protocol            = ["int_cpd_prop", "layer_protocol"]
    int_cpd_role                = ["int_cpd_prop", "role"]

    ext_cpd                     = ["node_templates", "{}"]
    ext_cpd_props               = ["ext_cpd", "properties"]
    ext_cpd_protocol            = ["ext_cpd_props", "layer_protocol"]
    ext_cpd_role                = ["ext_cpd_props", "role"]
    ext_cpd_reqs                = ["ext_cpd", "requirements"]
    ext_cpd_icps                = ["ext_cpd_reqs", "internal_connection_point"]



