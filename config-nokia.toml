
# These must match with 'provider-identifiers.{}'
# If the given provider for a VNFD matches with one of these, then it will automatically
# take the identifiers from this file
providers=["nokia"]

[provider-identifiers.nokia]
    vdu = ["type", "tosca.nodes.nfv.VDU"]
    int-cpd = ["type", "tosca.nodes.nfv.ICP"]
    int-cpd-mgmt = ["type", "cisco.nodes.nfv.VduCp"]
    instantiation-level = ["type", "tosca.policies.nfv.VduInstantiationLevels"]
    scaling-aspects = ["type", "tosca.policies.nfv.ScalingAspects"]
    virtual-storage = ["type", "tosca.nodes.nfv.VirtualStorage"]


# Note: If there is a variable with "path_VAL", that means it will not be parsed for the path
# heirarchy, but will instead just be set with the value
# The structure of the TOSCA file, in paths
[tosca]
    topology_template = "topology_template"
    substitution_mappings = ["topology_template", "substitution_mappings"]

    node_templates = ["topology_template", "node_templates"]
    policies = ["topology_template", "policies"]
    inputs = ["topology_template", "inputs"]
    desc = "description"
    input_key = "get_input"

    # ** VNF Metadata **
    vnf      = ["node_templates", "vnf"]
    vnf_prop = ["substitution_mappings", "properties"]
    vnf_desc_id = ["vnf_prop", "descriptor_id"]
    vnf_desc_ver = ["vnf_prop", "descriptor_version"]
    vnf_provider = ["vnf_prop", "provider"]
    vnf_product_name = ["vnf_prop", "product_name"]
    vnf_software_ver = ["vnf_prop", "software_version"]
    vnf_product_info_name = ["vnf_prop", "product_info_name"]
    vnf_vnfm_info = ["vnf_prop", "vnfm_info"]

    # ** VDU **
    vdu = ["node_templates", "{}"]
    vdu_props = ["vdu", "properties"]
    vdu_name = ["vdu_props", "name"]
    vdu_boot = ["vdu_props", "boot_order"]
    vdu_desc = ["vdu_props", "description"]
    vdu_conf_props = ["vdu_props", "configurable_properties.additional_vnfc_configurable_properties"]

    vdu_vim_flavor = ["vdu_conf_props", "vim_flavor"]
    vdu_cap_props = ["vdu", "capabilities.virtual_compute.properties"]
    vdu_virt_cpu_num = ["vdu_cap_props", "virtual_cpu.num_virtual_cpu"]
    vdu_virt_mem_size = ["vdu_cap_props", "virtual_memory.virtual_mem_size"]

    vdu_profile = ["vdu_props", "vdu_profile"]
    vdu_prof_inst_min = ["vdu_profile", "min_number_of_instances"]
    vdu_prof_inst_max = ["vdu_profile", "max_number_of_instances"]

    # ** Internal Connection Points **
    int_cpd = ["node_templates", "{}"]
    int_cpd_props = ["int_cpd", "properties"]
    int_cpd_req = ["int_cpd", "requirements"]
    int_cpd_virt_binding = ["int_cpd_req", "virtual_binding"]
    int_cpd_virt_link = ["int_cpd_req", "virtual_link"]
    int_cpd_layer_prot = ["int_cpd_props", "layer_protocols"]

    virt_storage = ["node_templates", "{}"]

    virt_props = ["virt_storage", "properties"]
    virt_artifacts = ["virt_storage", "artifacts"]
    virt_vsb = ["virt_props", "virtual_block_storage_data"]
    virt_size = ["virt_vsb", "size_of_storage"]
    virt_type = ["virt_vsb", "vdu_storage_requirements.type"]

    sw_image_data = ["virt_props", "sw_image_data"]
    sw_name = ["sw_image_data", "name"]
    sw_version = ["sw_image_data", "version"]
    sw_checksum = ["sw_image_data", "checksum"]
    sw_container_fmt = ["sw_image_data", "container_format"]
    sw_disk_fmt = ["sw_image_data", "disk_format"]
    sw_min_disk = ["sw_image_data", "min_disk"]
    sw_size = ["sw_image_data", "size"]
    sw_image_file = ["virt_artifacts", "sw_image.file"]

    # ** Deployment Flavor **
    df_id = ["vnf_prop", "flavour_id"]
    df_desc = ["vnf_prop", "flavour_description"]

    def_inst_level = ["policies", "instantiation_levels"]
    def_inst_key = "default"
    def_inst_prop = ["def_inst_level", "properties.levels"]
    def_inst_desc = ["def_inst_prop", "default.description"] # Matches def_inst_key
    inst_level = ["policies", "{}"]
    inst_level_targets = ["inst_level", "targets"]
    inst_level_num_instances = ["inst_level", "properties.levels.default.number_of_instances"]

    # ** Scaling Aspects **
    scaling_aspects = ["policies", "{}"]
    scaling_props = ["scaling_aspects", "properties"]
    scaling_aspect_item_list = ["scaling_props", "aspects"]
    scaling_aspect_item = ["scaling_aspect_item_list", "{}"]
    scaling_aspect_name = ["scaling_aspect_item", "name"]
    scaling_aspect_desc = ["scaling_aspect_item", "description"]
    scaling_aspect_level = ["scaling_aspect_item", "max_scale_level"]
    scaling_aspect_deltas = ["scaling_aspect_item", "step_deltas"]
    # Note: this is not a valid TOSCA path, it's for internal use
    scaling_aspect_deltas_num = ["scaling_aspect_item","deltas.{}.number_of_instances"]

# Sol6 Path configurations
[sol6]
    # **********
    # ** VNFD **
    # **********
    vnfd = "vnfd"
    vnfd_id = ["vnfd", "id"]
    vnfd_provider = ["vnfd", "provider"]
    vnfd_product = ["vnfd", "product-name"]
    vnfd_software_ver = ["vnfd", "software-version"]
    vnfd_ver = ["vnfd", "version"]
    vnfd_info_name = ["vnfd", "product-info-name"]
    vnfd_info_desc = ["vnfd", "product-info-description"]
    vnfd_vnfm_info = ["vnfd", "vnfm-info"]

    VALID_PROTOCOLS_VAL = ["Ethernet", "IPv4", "IPv6", "MPLS", "ODU2", "Pseudo-Wire"]

    # ********************************
    # ** Virtual Compute Descriptor **
    # ********************************
    vnfd_virt_compute_desc = ["vnfd", "virtual-compute-descriptor.{}"]
    vnfd_vcd_id = ["vnfd_virt_compute_desc", "id"]
    vnfd_vcd_flavor_name = ["vnfd_virt_compute_desc", "tailf-etsi-rel3-nfvo-vnfm-sol1-vnfd-extensions:flavor-name-variable"]
    vnfd_vcd_cpu_num = ["vnfd_virt_compute_desc", "virtual-cpu.num-virtual-cpu"]
    vnfd_vcd_mem_size = ["vnfd_virt_compute_desc", "virtual-memory.size"]

    # ********************************
    # ** Virtual Storage Descriptor **
    # ********************************
    vnfd_virt_storage_desc = ["vnfd", "virtual-storage-descriptor.{}"]
    vnfd_virt_storage_id = ["vnfd_virt_storage_desc", "id"]
    vnfd_virt_storage_type = ["vnfd_virt_storage_desc", "type-of-storage"]
    VIRT_STORAGE_DEFAULT_VAL = "root"
    vnfd_virt_storage_size = ["vnfd_virt_storage_desc", "size-of-storage"]
    vnfd_virt_storage_sw_image = ["vnfd_virt_storage_desc", "sw-image-desc"]

    # ***********************
    # ** Deployment Flavor **
    # ***********************
    deployment_flavor = ["vnfd", "df"]
    df_id = ["deployment_flavor", "id"]
    df_desc = ["deployment_flavor", "description"]
    df_vdu_profile = ["deployment_flavor", "vdu-profile.{}"]
    df_vdu_prof_id = ["df_vdu_profile", "id"]
    df_vdu_prof_inst_min = ["df_vdu_profile", "min-number-of-instances"]
    df_vdu_prof_inst_max = ["df_vdu_profile", "max-number-of-instances"]
    # -- Instantiation Level
    df_inst_level = ["deployment_flavor", "instantiation-level"]
    df_inst_level_id = ["df_inst_level", "id"]
    df_inst_level_desc = ["df_inst_level", "description"]
    df_inst_level_vdu_level = ["df_inst_level", "vdu-level.{}"]
    df_inst_level_vdu_vdu = ["df_inst_level_vdu_level", "id"]
    df_inst_level_vdu_num = ["df_inst_level_vdu_level", "number-of-instances"]
    # -- Scaling Info
    df_inst_scaling_info = ["df_inst_level", "scaling-aspect.{}"]
    df_inst_scaling_aspect = ["df_inst_scaling_info", "id"]
    df_inst_scaling_level = ["df_inst_scaling_info", "scale-level"]

    df_scale_aspect = ["deployment_flavor", "scaling-aspect.{}"]
    df_scale_aspect_id = ["df_scale_aspect", "id"]
    df_scale_aspect_name = ["df_scale_aspect", "name"]
    df_scale_aspect_desc = ["df_scale_aspect", "description"]
    df_scale_aspect_max_level = ["df_scale_aspect", "max-scale-level"]
    df_scale_aspect_delta_det = ["df_scale_aspect", "aspect-delta-details"]
    df_scale_aspect_deltas = ["df_scale_aspect_delta_det", "deltas"]
    df_scale_aspect_vdu_delta = ["df_scale_aspect", "vdu-delta.{}"]
    df_scale_aspect_vdu_id = ["df_scale_aspect_vdu_delta", "id"]
    df_scale_aspect_vdu_num = ["df_scale_aspect_vdu_delta", "number-of-instances"]

    # ****************************
    # ** Virtual/External Links **
    # ****************************
    virt_link_desc = ["vnfd", "int-virtual-link-desc.{}"]
    virt_link_desc_id = ["virt_link_desc", "id"]
    virt_link_desc_protocol = ["virt_link_desc", "connectivity-type.layer-protocol"]

    ext_cpd = ["vnfd", "ext-cpd.{}"]
    ext_cpd_id = ["ext_cpd", "id"]
    ext_cpd_protocol = ["ext_cpd", "layer-protocol"]
    ext_cpd_virt_link = ["ext_cpd", "int-virtual-link-desc"]


    # *********
    # ** VDU **
    # *********
    vdus = ["vnfd", "vdu"]
    vdu = ["vdus", "{}"]
    vdu_name = ["vdu", "name"]
    vdu_desc = ["vdu", "description"]
    vdu_id = ["vdu", "id"]
    vdu_boot_order = ["vdu", "boot-order.{}"]
    vdu_boot_key = ["vdu_boot_order", "key"]
    vdu_boot_value = ["vdu_boot_order", "value"]
    vdu_vc_desc = ["vdu", "virtual-compute-desc.{}"]
    vdu_vs_desc = ["vdu", "virtual-storage-desc.{}"]

    # ********************************
    # ** Internal Connection Points **
    # ********************************
    int_cpd = ["vdu", "int-cpd.{}"]
    int_cpd_id = ["int_cpd", "id"]
    int_cpd_layer_prot = ["int_cpd", "layer-protocol"]
    int_cpd_virt_link_desc = ["int_cpd", "int-virtual-link-desc"]

    KEY_VIRT_LINK_MGMT_VAL = "CP_MGMT"
    KEY_VIRT_LINK_MGMT_PROT_VAL = "IPv4"
    KEY_VIRT_LINK_ORCH_VAL = "CP_ORCH"
    KEY_VIRT_LINK_ORCH_PROT_VAL = "IPv4"
    KEY_EXT_CP_MGMT_VAL = "CP_EXT_MGMT"
    KEY_EXT_CP_MGMT_PROT_VAL = "IPv4"
    KEY_EXT_CP_ORCH_VAL = "CP_EXT_ORCH"
    KEY_EXT_CP_ORCH_PROT_VAL = "IPv4"

    # *******************************
    # ** Software Image Descriptor **
    # *******************************
    sw_img_desc = ["vnfd", "sw-image-desc.{}"]
    sw_id = ["sw_img_desc", "id"]
    sw_name = ["sw_img_desc", "name"]
    sw_image_name_var = ["sw_img_desc", "tailf-etsi-rel3-nfvo-vnfm-sol1-vnfd-extensions:image-name-variable"]
    sw_version = ["sw_img_desc", "version"]
    sw_checksum = ["sw_img_desc", "checksum"]
    sw_container_format = ["sw_img_desc", "container-format"]
    sw_disk_format = ["sw_img_desc", "disk-format"]
    sw_min_disk = ["sw_img_desc", "min-disk"]
    sw_size = ["sw_img_desc", "size"]
    sw_image = ["sw_img_desc", "image"]
